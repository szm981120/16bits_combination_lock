`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2018/06/15 21:01:50
// Design Name: 
// Module Name: passwordlock
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module passwordlock(input_pwd,if_right,reset,set_pwd,red,green,clk,led_light,warning,led_present_pwd,show_present_pwd);
input clk;
input [15:0] input_pwd;
input if_right,reset,set_pwd,show_present_pwd;
output red,green,warning;
output [7:0] led_light;
output [10:0] led_present_pwd;

reg [7:0] led_light;
reg [10:0] led_present_pwd;
reg red,green,warning;
reg clk_out;
reg [15:0] password;
reg if_wrong;
reg countdown_start_flag;
reg [2:0] countdown;
reg [1:0] if_posedge;
integer counter;
integer mod_four_counter;
parameter FREQUENCE=2000000;

initial
begin
    countdown = 3'b101;
    if_wrong = 0;
    countdown_start_flag = 0;
    password = 0;
    counter = 0;
    mod_four_counter = 1;
    if_posedge = 2'b00;
    red = 0;
    green = 0;
    warning = 0;
end

always @(posedge clk)
begin
    if(reset)
    begin
        green <= 0;
        red <= 0;
        warning <= 0;
        countdown <= 3'b101;
        led_light <= 8'b11011011;
    end
    if(set_pwd)
    begin
        password = input_pwd;
    end
    else if(if_right)
    begin
        if(input_pwd == password)
        begin end
        else begin if_wrong = 1; end        
        if(if_wrong)
        begin
            red <= 1;
            green <= 0;
            if_wrong <= 0;
            countdown_start_flag <= 1;
        end
        else begin
        green <= 1;
        red <= 0;
        if_wrong <= 0;
        countdown_start_flag <= 0;
        end
    end
    if_posedge[0] <= clk_out;
    if_posedge[1] <= if_posedge[0];
    if(counter == 50000000)
    begin
        clk_out = ~clk_out;
        counter = 0;
    end
    else if(countdown_start_flag)
    begin
        counter = counter + 1;
    end 
    else 
    begin end
    if(if_posedge == 2'b01 && red == 1 && warning == 0)
    begin     
        countdown <= countdown - 3'b001;
        case(countdown)
            3'b000:led_light <= 8'b11111110;
            3'b001:led_light <= 8'b10000110;
            3'b010:led_light <= 8'b11101101;   
            3'b011:led_light <= 8'b11111001;
            3'b100:led_light <= 8'b10110011;
            3'b101:led_light <= 8'b11011011;
        endcase
       
        if(countdown == 3'b000)
        begin
            warning <= 1;       
        end
    end
        
    if(show_present_pwd == 1)
    begin
        case(mod_four_counter)
            FREQUENCE/4:
            begin
                led_present_pwd[10:7] <= 4'b0001;
                case(password[3:0])
                    0:led_present_pwd[6:0] <= 7'b1111110;
					1:led_present_pwd[6:0] <= 7'b0000110;
					2:led_present_pwd[6:0] <= 7'b1101101;
					3:led_present_pwd[6:0] <= 7'b1111001;
					4:led_present_pwd[6:0] <= 7'b0110011;
					5:led_present_pwd[6:0] <= 7'b1011011;
					6:led_present_pwd[6:0] <= 7'b1011111;
					7:led_present_pwd[6:0] <= 7'b1110000;
					8:led_present_pwd[6:0] <= 7'b1111111;
					9:led_present_pwd[6:0] <= 7'b1111011;
					10:led_present_pwd[6:0] <= 7'b1110111;
					11:led_present_pwd[6:0] <= 7'b0011111;
					12:led_present_pwd[6:0] <= 7'b1001110;
					13:led_present_pwd[6:0] <= 7'b0111101;
					14:led_present_pwd[6:0] <= 7'b1001111;
					15:led_present_pwd[6:0] <= 7'b1000111;
                endcase
            end
            FREQUENCE/4*2:
            begin
                led_present_pwd[10:7] <= 4'b0010;
                case(password[7:4])
                    0:led_present_pwd[6:0] <= 7'b1111110;
					1:led_present_pwd[6:0] <= 7'b0000110;
					2:led_present_pwd[6:0] <= 7'b1101101;
					3:led_present_pwd[6:0] <= 7'b1111001;
					4:led_present_pwd[6:0] <= 7'b0110011;
					5:led_present_pwd[6:0] <= 7'b1011011;
					6:led_present_pwd[6:0] <= 7'b1011111;
					7:led_present_pwd[6:0] <= 7'b1110000;
					8:led_present_pwd[6:0] <= 7'b1111111;
					9:led_present_pwd[6:0] <= 7'b1111011;
					10:led_present_pwd[6:0] <= 7'b1110111;
					11:led_present_pwd[6:0] <= 7'b0011111;
					12:led_present_pwd[6:0] <= 7'b1001110;
					13:led_present_pwd[6:0] <= 7'b0111101;
					14:led_present_pwd[6:0] <= 7'b1001111;
					15:led_present_pwd[6:0] <= 7'b1000111;
                endcase
            end
            FREQUENCE/4*3:
            begin
                led_present_pwd[10:7] <= 4'b0100;
                case(password[11:8])
                    0:led_present_pwd[6:0] <= 7'b1111110;
					1:led_present_pwd[6:0] <= 7'b0000110;
					2:led_present_pwd[6:0] <= 7'b1101101;
					3:led_present_pwd[6:0] <= 7'b1111001;
					4:led_present_pwd[6:0] <= 7'b0110011;
					5:led_present_pwd[6:0] <= 7'b1011011;
					6:led_present_pwd[6:0] <= 7'b1011111;
					7:led_present_pwd[6:0] <= 7'b1110000;
					8:led_present_pwd[6:0] <= 7'b1111111;
					9:led_present_pwd[6:0] <= 7'b1111011;
					10:led_present_pwd[6:0] <= 7'b1110111;
					11:led_present_pwd[6:0] <= 7'b0011111;
					12:led_present_pwd[6:0] <= 7'b1001110;
					13:led_present_pwd[6:0] <= 7'b0111101;
					14:led_present_pwd[6:0] <= 7'b1001111;
					15:led_present_pwd[6:0] <= 7'b1000111;
                endcase
            end
            FREQUENCE:
            begin
                led_present_pwd[10:7] <= 4'b1000;
                case(password[15:12])
                    0:led_present_pwd[6:0] <= 7'b1111110;
                    1:led_present_pwd[6:0] <= 7'b0000110;
                    2:led_present_pwd[6:0] <= 7'b1101101;
                    3:led_present_pwd[6:0] <= 7'b1111001;
                    4:led_present_pwd[6:0] <= 7'b0110011;
                    5:led_present_pwd[6:0] <= 7'b1011011;
                    6:led_present_pwd[6:0] <= 7'b1011111;
                    7:led_present_pwd[6:0] <= 7'b1110000;
                    8:led_present_pwd[6:0] <= 7'b1111111;
                    9:led_present_pwd[6:0] <= 7'b1111011;
                    10:led_present_pwd[6:0] <= 7'b1110111;
                    11:led_present_pwd[6:0] <= 7'b0011111;
                    12:led_present_pwd[6:0] <= 7'b1001110;
                    13:led_present_pwd[6:0] <= 7'b0111101;
                    14:led_present_pwd[6:0] <= 7'b1001111;
                    15:led_present_pwd[6:0] <= 7'b1000111;
                endcase
            end
        endcase
    end
    else
    begin
        case(mod_four_counter)
                FREQUENCE/4:
                begin
                    led_present_pwd[10:7] <= 4'b0001;
                    case(input_pwd[3:0])
                        0:led_present_pwd[6:0] <= 7'b1111110;
						1:led_present_pwd[6:0] <= 7'b0000110;
						2:led_present_pwd[6:0] <= 7'b1101101;
						3:led_present_pwd[6:0] <= 7'b1111001;
						4:led_present_pwd[6:0] <= 7'b0110011;
						5:led_present_pwd[6:0] <= 7'b1011011;
						6:led_present_pwd[6:0] <= 7'b1011111;
						7:led_present_pwd[6:0] <= 7'b1110000;
						8:led_present_pwd[6:0] <= 7'b1111111;
						9:led_present_pwd[6:0] <= 7'b1111011;
						10:led_present_pwd[6:0] <= 7'b1110111;
						11:led_present_pwd[6:0] <= 7'b0011111;
						12:led_present_pwd[6:0] <= 7'b1001110;
						13:led_present_pwd[6:0] <= 7'b0111101;
						14:led_present_pwd[6:0] <= 7'b1001111;
						15:led_present_pwd[6:0] <= 7'b1000111;
                    endcase
                end
                FREQUENCE/4*2:
                begin
                    led_present_pwd[10:7] <= 4'b0010;
                    case(input_pwd[7:4])
                        0:led_present_pwd[6:0] <= 7'b1111110;
						1:led_present_pwd[6:0] <= 7'b0000110;
						2:led_present_pwd[6:0] <= 7'b1101101;
						3:led_present_pwd[6:0] <= 7'b1111001;
						4:led_present_pwd[6:0] <= 7'b0110011;
						5:led_present_pwd[6:0] <= 7'b1011011;
						6:led_present_pwd[6:0] <= 7'b1011111;
						7:led_present_pwd[6:0] <= 7'b1110000;
						8:led_present_pwd[6:0] <= 7'b1111111;
						9:led_present_pwd[6:0] <= 7'b1111011;
						10:led_present_pwd[6:0] <= 7'b1110111;
						11:led_present_pwd[6:0] <= 7'b0011111;
						12:led_present_pwd[6:0] <= 7'b1001110;
						13:led_present_pwd[6:0] <= 7'b0111101;
						14:led_present_pwd[6:0] <= 7'b1001111;
						15:led_present_pwd[6:0] <= 7'b1000111;
                    endcase
                end
                FREQUENCE/4*3:
                begin
                    led_present_pwd[10:7] <= 4'b0100;
                    case(input_pwd[11:8])
                        0:led_present_pwd[6:0] <= 7'b1111110;
						1:led_present_pwd[6:0] <= 7'b0000110;
						2:led_present_pwd[6:0] <= 7'b1101101;
						3:led_present_pwd[6:0] <= 7'b1111001;
						4:led_present_pwd[6:0] <= 7'b0110011;
						5:led_present_pwd[6:0] <= 7'b1011011;
						6:led_present_pwd[6:0] <= 7'b1011111;
						7:led_present_pwd[6:0] <= 7'b1110000;
						8:led_present_pwd[6:0] <= 7'b1111111;
						9:led_present_pwd[6:0] <= 7'b1111011;
						10:led_present_pwd[6:0] <= 7'b1110111;
						11:led_present_pwd[6:0] <= 7'b0011111;
						12:led_present_pwd[6:0] <= 7'b1001110;
						13:led_present_pwd[6:0] <= 7'b0111101;
						14:led_present_pwd[6:0] <= 7'b1001111;
						15:led_present_pwd[6:0] <= 7'b1000111;
                    endcase
                end
                FREQUENCE:
                begin
                    led_present_pwd[10:7] <= 4'b1000;
                    case(input_pwd[15:12])
                        0:led_present_pwd[6:0] <= 7'b1111110;
                        1:led_present_pwd[6:0] <= 7'b0000110;
                        2:led_present_pwd[6:0] <= 7'b1101101;
                        3:led_present_pwd[6:0] <= 7'b1111001;
                        4:led_present_pwd[6:0] <= 7'b0110011;
                        5:led_present_pwd[6:0] <= 7'b1011011;
                        6:led_present_pwd[6:0] <= 7'b1011111;
                        7:led_present_pwd[6:0] <= 7'b1110000;
                        8:led_present_pwd[6:0] <= 7'b1111111;
                        9:led_present_pwd[6:0] <= 7'b1111011;
                        10:led_present_pwd[6:0] <= 7'b1110111;
                        11:led_present_pwd[6:0] <= 7'b0011111;
                        12:led_present_pwd[6:0] <= 7'b1001110;
                        13:led_present_pwd[6:0] <= 7'b0111101;
                        14:led_present_pwd[6:0] <= 7'b1001111;
                        15:led_present_pwd[6:0] <= 7'b1000111;
                    endcase
                end
            endcase
    end
    mod_four_counter = mod_four_counter + 1;
    if(mod_four_counter == (FREQUENCE+1))
    begin 
        mod_four_counter = 1;
    end
    
end
endmodule
